// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logmonitoring.proto

package logmonitorning

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the identifiers of the log , which is requesting.
type LogRequest struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4758abcd0210d504, []int{0}
}

func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

// The response message containing the logs
type LogReply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogReply) Reset()         { *m = LogReply{} }
func (m *LogReply) String() string { return proto.CompactTextString(m) }
func (*LogReply) ProtoMessage()    {}
func (*LogReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4758abcd0210d504, []int{1}
}

func (m *LogReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogReply.Unmarshal(m, b)
}
func (m *LogReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogReply.Marshal(b, m, deterministic)
}
func (m *LogReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogReply.Merge(m, src)
}
func (m *LogReply) XXX_Size() int {
	return xxx_messageInfo_LogReply.Size(m)
}
func (m *LogReply) XXX_DiscardUnknown() {
	xxx_messageInfo_LogReply.DiscardUnknown(m)
}

var xxx_messageInfo_LogReply proto.InternalMessageInfo

func (m *LogReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*LogRequest)(nil), "logmonitorning.LogRequest")
	proto.RegisterType((*LogReply)(nil), "logmonitorning.LogReply")
}

func init() { proto.RegisterFile("logmonitoring.proto", fileDescriptor_4758abcd0210d504) }

var fileDescriptor_4758abcd0210d504 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xc9, 0x4f, 0xcf,
	0xcd, 0xcf, 0xcb, 0x2c, 0xc9, 0x2f, 0xca, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x43, 0x08, 0xe6, 0x65, 0xe6, 0xa5, 0x2b, 0x29, 0x71, 0x71, 0xf9, 0xe4, 0xa7, 0x07, 0xa5,
	0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x70, 0xb1, 0x16, 0x96, 0xa6, 0x16, 0x55, 0x4a, 0x30,
	0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x4a, 0x2a, 0x5c, 0x1c, 0x60, 0x35, 0x05, 0x39, 0x95,
	0x42, 0x12, 0x5c, 0xec, 0xb9, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x50, 0x35, 0x30, 0xae, 0x51,
	0x0c, 0x17, 0x9b, 0x4f, 0x7e, 0x7a, 0x7a, 0x6a, 0x91, 0x50, 0x10, 0x97, 0x98, 0x4b, 0x62, 0x71,
	0x86, 0x53, 0x7e, 0x62, 0x51, 0x8a, 0x4f, 0x7e, 0xba, 0x6f, 0x62, 0x5e, 0x62, 0x7a, 0x6a, 0x6e,
	0x6a, 0x5e, 0x89, 0x90, 0x94, 0x1e, 0xaa, 0xf5, 0x7a, 0x08, 0xbb, 0xa5, 0x24, 0xb0, 0xca, 0x15,
	0xe4, 0x54, 0x2a, 0x31, 0x18, 0x30, 0x3a, 0x89, 0x39, 0x09, 0x81, 0x8c, 0x82, 0x7b, 0x27, 0x00,
	0xe4, 0x9b, 0x00, 0xc6, 0x24, 0x36, 0xb0, 0xb7, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa8,
	0x30, 0xfa, 0x67, 0xed, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LoggerClient is the client API for Logger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LoggerClient interface {
	// Sends a DashBoardLogManagement
	DashBoardLogManagement(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Logger_DashBoardLogManagementClient, error)
}

type loggerClient struct {
	cc *grpc.ClientConn
}

func NewLoggerClient(cc *grpc.ClientConn) LoggerClient {
	return &loggerClient{cc}
}

func (c *loggerClient) DashBoardLogManagement(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Logger_DashBoardLogManagementClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Logger_serviceDesc.Streams[0], "/logmonitorning.Logger/DashBoardLogManagement", opts...)
	if err != nil {
		return nil, err
	}
	x := &loggerDashBoardLogManagementClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Logger_DashBoardLogManagementClient interface {
	Recv() (*LogReply, error)
	grpc.ClientStream
}

type loggerDashBoardLogManagementClient struct {
	grpc.ClientStream
}

func (x *loggerDashBoardLogManagementClient) Recv() (*LogReply, error) {
	m := new(LogReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LoggerServer is the server API for Logger service.
type LoggerServer interface {
	// Sends a DashBoardLogManagement
	DashBoardLogManagement(*LogRequest, Logger_DashBoardLogManagementServer) error
}

// UnimplementedLoggerServer can be embedded to have forward compatible implementations.
type UnimplementedLoggerServer struct {
}

func (*UnimplementedLoggerServer) DashBoardLogManagement(req *LogRequest, srv Logger_DashBoardLogManagementServer) error {
	return status.Errorf(codes.Unimplemented, "method DashBoardLogManagement not implemented")
}

func RegisterLoggerServer(s *grpc.Server, srv LoggerServer) {
	s.RegisterService(&_Logger_serviceDesc, srv)
}

func _Logger_DashBoardLogManagement_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LoggerServer).DashBoardLogManagement(m, &loggerDashBoardLogManagementServer{stream})
}

type Logger_DashBoardLogManagementServer interface {
	Send(*LogReply) error
	grpc.ServerStream
}

type loggerDashBoardLogManagementServer struct {
	grpc.ServerStream
}

func (x *loggerDashBoardLogManagementServer) Send(m *LogReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Logger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logmonitorning.Logger",
	HandlerType: (*LoggerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DashBoardLogManagement",
			Handler:       _Logger_DashBoardLogManagement_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "logmonitoring.proto",
}
